
policy:
  model_name: "Qwen/Qwen2.5-1.5B-Instruct" 
  tokenizer:
    name: ${policy.model_name} ## specify if you'd like to use a tokenizer different from the model's default
  train_global_batch_size: 8  
  train_micro_batch_size: 1  
  generation_batch_size: 8 
  logprob_batch_size: 2  
  max_total_sequence_length: 1024  
  precision: "bfloat16"

  dtensor_cfg:
    enabled: true
    cpu_offload: False
    sequence_parallel: false
    activation_checkpointing: false
    tensor_parallel_size: 1
    context_parallel_size: 1
    custom_parallel_plan: null
  
  megatron_cfg:
    enabled: false


  make_sequence_length_divisible_by: ${policy.dtensor_cfg.tensor_parallel_size}
  max_grad_norm: 1.0


  dynamic_batching:
    enabled: False
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    logprob_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.logprob_batch_size}}
    sequence_length_round: 64

  sequence_packing:
    enabled: True
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    logprob_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.logprob_batch_size}}
    algorithm: "modified_first_fit_decreasing"
    sequence_length_round: 64

  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 5.0e-6
      weight_decay: 0.01
      betas: [0.9, 0.999]
      eps: 1e-8
      # when using Dtensor, we need to set foreach
      # and fused to False
      foreach: False
      fused: False

  scheduler:
    - name: "torch.optim.lr_scheduler.LinearLR"
      kwargs:
        start_factor: 0.1
        end_factor: 1.0
        total_iters: 50
    - name: "torch.optim.lr_scheduler.ConstantLR"
      kwargs:
        factor: 1.0
        total_iters: 10000000000
    - milestones: [50]


  generation:
    backend: "vllm"  
    max_new_tokens: ${policy.max_total_sequence_length}  # refer to policy config
    temperature: 1.0
    top_p: 0.95
    top_k: 50
    stop_token_ids: null
    stop_strings: null
 
    vllm_cfg:
      async_engine: false
      precision: ${policy.precision}
      tensor_parallel_size: 1
      pipeline_parallel_size: 1
      gpu_memory_utilization: 0.5  
      max_model_len: ${policy.max_total_sequence_length}  # refer to policy config
      enforce_eager: False

      distributed_executor_backend: null
  
    colocated:

      enabled: true

      resources:
        gpus_per_node: null 
        num_nodes: null 


loss_fn:
  temperature: 1.0
  alpha: 1.0  
  kl_type: "mixed"     # forward, reverse, mixed
  mixed_kl_weight: 0.5 # when kl_type is "mixed", this is the weight of the forward KL

# distillation algorithm config
distillation:
  teacher_model_path: "Qwen/Qwen2.5-3B-Instruct"
  
  # distillation policy parameters
  generate_strategy:  # student generation parameters
    max_length: ${policy.max_total_sequence_length}  # refer to policy config
    max_new_tokens: 128  # limit the number of generated tokens, avoid sequence too long (this value should be less than max_total_sequence_length)
    temperature: 1.0  # sampling temperature (control the randomness of generation, default is 1.0)
    decoding_method: "top_p"  # decoding method (e.g. greedy, top_k)
  
  max_steps: 1000
  eval_steps: 20
  save_steps: 500
  logging_steps: 10
  num_prompts_per_step: 8  
  num_generations_per_prompt: 8  
  val_batch_size: 8  
  val_period: 100
  val_at_start: false
  max_val_samples: 100


env:
  math:
    num_workers: 8


data:
  prompt_file: "math.txt"
  max_input_seq_length: ${policy.max_total_sequence_length} 
  system_prompt_file: null  
  dataset_name: "pe-nlp/math-cl"  
  shuffle: true


cluster:
  gpus_per_node: 8
  num_nodes: 1

env_vars:
  PYTORCH_CUDA_ALLOC_CONF: "expandable_segments:False"  
  CUDA_LAUNCH_BLOCKING: "1"  
  
  VLLM_DISABLE_DISTRIBUTED_INIT: "1"
  NCCL_DISABLE: "1"


logger:
  log_dir: "logs/distillation" 
  num_val_samples_to_print: 0 
  wandb_enabled: true  
  tensorboard_enabled: true  
  mlflow_enabled: false 
  monitor_gpus: true  
  wandb:
    project: "nemo-distillation"
    name: "distillation-${data.dataset_name}-${policy.model_name}"
    entity: null  
  tensorboard:
    log_dir: "tb_logs-distillation-${data.dataset_name}"
  mlflow:
    experiment_name: "distillation-dev"
    run_name: "distillation-math-cl-logger"
  gpu_monitoring:
    collection_interval: 10 
    flush_interval: 10 

checkpointing:
  enabled: true
  checkpoint_dir: "checkpoints/distillation"  
  metric_name: "val_loss"  
  higher_is_better: false 
  keep_top_k: 3  
  save_period: 500 
  checkpoint_must_save_by: "2025-12-31"
